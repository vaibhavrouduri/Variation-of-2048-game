# -*- coding: utf-8 -*-
"""POPLassignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fnNmVNyMtwKUjF0yvBNQKmVUmLh9MgTr
"""

import random

def start_game():

  mat = []
  for i in range(4):
    mat.append([0] * 4)

  print("Controls for the game:")
  print("w : up")
  print("s : down") 
  print("a : left")
  print("d : right")

  add_new_tile(mat)
  add_new_tile(mat)

  return mat

def add_new_tile(mat):
  r = random.randint(0, 3)
  c = random.randint(0, 3)

  while(mat[r][c] != 0):
    r = random.randint(0, 3)
    c = random.randint(0, 3)  

  mat[r][c] = random.randrange(2, 5, 2)

def get_current_state(mat):
  sum = 0
  for i in range(4):
    for j in range(4):
      sum += mat[i][j] 

  if(sum == 8):
    return 'WON'

  elif(sum == 10):
    return 'LOST, REDO'
  
  else:
    return 'GAME NOT OVER'

def compress(mat):

  changed = False

  new_mat = []

  for i in range(4):
    new_mat.append([0] * 4)

  for i in range(4):
    pos = 0
    for j in range(4):
      if(mat[i][j] != 0):
        new_mat[i][pos] = mat[i][j]

        if(j != pos):
          changed = True
        pos += 1
  
  return new_mat, changed

def merge(mat):

  changed = False

  for i in range(4):
    for j in range(3):
      if(mat[i][j] == mat[i][j+1] and mat[i][j] != 0):
        mat[i][j] = mat[i][j] * 2
        mat[i][j + 1] = 0

        changed = True
  return mat, changed

def reverse(mat):
  new_mat = []
  for i in range(4):
    new_mat.append([])
    for j in range(4):
      new_mat[i].append(mat[i][3 - j])
  return new_mat

def transpose(mat):
  new_mat = []
  for i in range(4):
    new_mat.append([])
    for j in range(4):
      new_mat[i].append(mat[j][i])
  return new_mat

def move_left(grid):
  new_grid, changed1 = compress(grid)
  new_grid, changed2 = merge(new_grid)
  changed = changed1 or changed2
  new_grid, temp = compress(new_grid)

  return new_grid, changed

def move_right(grid):
  new_grid = reverse(grid)
  new_grid, changed = move_left(new_grid)
  new_grid = reverse(new_grid)
  
  return new_grid, changed

def move_up(grid):
  new_grid = transpose(grid)
  new_grid, changed = move_left(new_grid)
  new_grid = transpose(new_grid)
  return new_grid, changed

def move_down(grid):
  new_grid = transpose(grid)
  new_grid, changed = move_right(new_grid)
  new_grid = transpose(new_grid)
  return new_grid, changed

#Implementing the game
mat = start_game()
tmat = []
print(mat)

while(True):
  if(get_current_state(mat) == 'WON'):
    print(get_current_state(mat))
    break
  tmat = mat[:]
  x = input("Press the button :")
  if(x == 'w'):
    mat, flag = move_up(mat)
    status = get_current_state(mat)
    if(status == 'GAME NOT OVER'):
      add_new_tile(mat)
      if(get_current_state(mat) == 'LOST, REDO'):
        print(mat)
        print(get_current_state(mat))
        mat = tmat[:]
        print(mat)
      else:
        print(mat)
    else:
      break

  elif(x == 's'):
    mat, flag = move_down(mat)
    status = get_current_state(mat)
    if(status == 'GAME NOT OVER'):
      add_new_tile(mat)
      if(get_current_state(mat) == 'LOST, REDO'):
        print(mat)
        print(get_current_state(mat))
        mat = tmat[:]
        print(mat)
      else:
        print(mat)
    else:
      break

  elif(x == 'a'):
    mat, flag = move_left(mat)
    status = get_current_state(mat)
    if(status == 'GAME NOT OVER'):
      add_new_tile(mat)
      if(get_current_state(mat) == 'LOST, REDO'):
        print(mat)
        print(get_current_state(mat))
        mat = tmat[:]
        print(mat)
      else:
        print(mat)
    else:
      break

  elif(x == 'd'):
    mat, flag = move_right(mat)
    status = get_current_state(mat)
    if(status == 'GAME NOT OVER'):
      add_new_tile(mat)
      if(get_current_state(mat) == 'LOST, REDO'):
        print(mat)
        print(get_current_state(mat))
        mat = tmat[:]
        print(mat)
      else:
        print(mat)
    else:
      break
  else:
    print("Invalid Key Pressed")
  if(get_current_state(mat) == 'WON'):
    print(get_current_state(mat))
    break

